package services;

import models.Chart;
import models.Prescription;
import models.users.Consultant;
import models.Patient;

import com.itextpdf.text.Anchor;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.List;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

import java.io.File;
import java.io.IOException;
import java.util.Date;


public class PDF {
    public final String FILE;
    static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,
            Font.BOLD);
    static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12,
            Font.NORMAL, BaseColor.RED);
    static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16,
            Font.BOLD);
    static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12,
            Font.BOLD);

    public PDF(Patient p) {
        FILE = "public/pdfFolder/" + p.getMrn() + ".pdf";
        File file = new File(FILE);
    }

    public static void addMetaData(Document document, Patient p) {
        document.addTitle(p.getfName() + p.getlName() + " | " + p.getMrn());
        document.addSubject("Using iText");
        document.addKeywords("Java, PDF, iText");
        document.addAuthor("Lars Vogel");
        document.addCreator("Lars Vogel");
    }

    public static void addTitlePage(Document document, Patient p)
            throws DocumentException {
        Paragraph preface = new Paragraph();
        // We add one empty line
        addEmptyLine(preface, 1);
        // Lets write a big header
        preface.add(new Paragraph("Please ensure your patient account number is correct", catFont));

        addEmptyLine(preface, 1);
        // Will create: Report generated by: _name, _date
        preface.add(new Paragraph(
                "Report generated by: " + System.getProperty("**Enter Hospital Name**") + ", " + new Date(), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
                smallBold));
        addEmptyLine(preface, 3);
        preface.add(new Paragraph(
                "Breakdown of costs",
                smallBold));

        addEmptyLine(preface, 8);
        if(p.getChart().getCurrentWard() != null) {
            preface.add(new Paragraph(
                    "Duration of stay: ",
                    smallBold));
            preface.add(new Paragraph(
                    "Cost of stay: ",
                    smallBold));
            preface.add(new Paragraph(
                    "Duration of stay: ",
                    smallBold));
        }
        document.add(preface);
        // Start a new page
        document.newPage();
    }

    public static void addContent(Document document, Patient p, int duration, double costOfStay, double costOfAppointments, double prescriptionCost) throws DocumentException {
        Anchor anchor = new Anchor("Medical Bill", catFont);
        anchor.setName("Medical Bill");
        Paragraph preface = new Paragraph();
        // We add one empty line
        addEmptyLine(preface, 1);
        // Lets write a big header
        preface.add(new Paragraph("Please ensure your patient account number is correct", catFont));

        addEmptyLine(preface, 1);
        // Will create: Report generated by: _name, _date
        preface.add(new Paragraph(
                "Report generated by: **Enter Hospital Name**, " + new Date(), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
                smallBold));
        addEmptyLine(preface, 3);
        preface.add(new Paragraph(
                "Breakdown of costs",
                smallBold));
        document.add(preface);

        Chapter catPart = new Chapter(new Paragraph(anchor), 1);
        Paragraph subPara = new Paragraph("Breakdown Of Costs", subFont);
        Section subCatPart = catPart.addSection(subPara);
        subPara = new Paragraph("Appointments and Admittance", subFont);

        subCatPart = catPart.addSection(subPara);
        // add a list
        Paragraph paragraph = new Paragraph();
        addEmptyLine(paragraph, 5);
        subCatPart.add(paragraph);

        // add a table
        createTable(subCatPart, p, duration, costOfAppointments, costOfStay);

        addEmptyLine(paragraph, 5);
        subCatPart.add(paragraph);
        if(p.getChart().getPrescriptionList().size() != 0) {
            createPresList(subCatPart, p , prescriptionCost);
        }

        // now add all this to the document
        document.add(subCatPart);

    }

    public static void createTable(Section subCatPart, Patient p, int duration, double costOfAppointments, double costOfDays)
            throws BadElementException {
        PdfPTable table = new PdfPTable(3);
        // t.setBorderColor(BaseColor.GRAY);
        // t.setPadding(4);
        // t.setSpacing(4);
        // t.setBorderWidth(1);

        PdfPCell c1;
        if(p.getChart().getDateOfAdmittance() != null) {
            c1 = new PdfPCell(new Phrase("Appointments"));
            c1.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(c1);
            table.addCell("€" + Double.toString(costOfAppointments));
            table.addCell(Integer.toString(p.getAppointments().size()) + " appointments");
        }
        if(p.getAppointments().size() != 0) {
            c1 = new PdfPCell(new Phrase("Admittance"));
            c1.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(c1);
            table.addCell(Integer.toString(duration) + " days");
            table.addCell("€" + Double.toString(costOfDays));
        }

        if(p.getAppointments().size() != 0 || p.getChart().getDateOfAdmittance() != null) {
            subCatPart.add(table);
        }

    }

    public static void createPresList(Section subCatPart, Patient p, double prescriptionCost) {
        List list = new List(true, false, 10);
        for (Prescription pres : p.getChart().getPrescriptionList()) {
            list.add(new ListItem(pres.getMedicine().getName() + " " + pres.getDosage() + pres.getMedicine().getUnitOfMeasurement() + " €" + prescriptionCost));
        }
        subCatPart.add(list);
    }

    public static void addEmptyLine(Paragraph paragraph, int number) {
        for (int i = 0; i < number; i++) {
            paragraph.add(new Paragraph(" "));
        }
    }
}



